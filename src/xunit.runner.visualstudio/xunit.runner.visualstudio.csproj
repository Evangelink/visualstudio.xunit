<Project Sdk="Microsoft.Net.SDK">

  <PropertyGroup>
    <AssemblyTitle>xUnit.net Runner for Visual Studio ($(TargetFramework))</AssemblyTitle>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <RootNamespace>Xunit.Runner.VisualStudio</RootNamespace>
    <TargetFrameworks>net462;net6.0</TargetFrameworks>
    <WarningsAsErrors>true</WarningsAsErrors>
    <BuildOutputTargetFolder>build</BuildOutputTargetFolder>
    <CopyLocalLockFileAssemblies Condition=" '$(TargetFramework)' == 'net6.0' ">true</CopyLocalLockFileAssemblies>
    <NoWarn>$(NoWarn);CS0436</NoWarn>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' == 'net462' ">
    <AssemblyName>xunit.runner.visualstudio.testadapter</AssemblyName>
    <DefineConstants>$(DefineConstants);NETFRAMEWORK</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' == 'net6.0' ">
    <AssemblyName>xunit.runner.visualstudio.dotnetcore.testadapter</AssemblyName>
    <DefineConstants>$(DefineConstants);NETCOREAPP</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <PackageDownload Include="ILRepack.MSBuild.Task" Version="[$(ILRepackVersion)]" />
    <PackageDownload Include="Microsoft.NETCore.App.Ref" Version="[$(MicrosoftNetCoreAppRefVersion)]" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.TestPlatform.ObjectModel" Version="$(MicrosoftTestPlatformObjectModelVersion)" PrivateAssets="All" />
    <PackageReference Include="TunnelVisionLabs.ReferenceAssemblyAnnotator" Version="$(TunnelVisionLabsReferenceAssemblyAnnotatorVersion)" PrivateAssets="All" />
    <PackageReference Include="xunit.analyzers" Version="$(XunitAnalyzersVersion)" PrivateAssets="All" />
    <PackageReference Include="xunit.runner.reporters" Version="$(XunitVersion)" PrivateAssets="All" />
  </ItemGroup>

  <!-- Support deterministic builds (via https://github.com/clairernovotny/DeterministicBuilds) -->
  <PropertyGroup>
    <ContinuousIntegrationBuild Condition=" '$(GITHUB_ACTIONS)' == 'true' ">true</ContinuousIntegrationBuild>
    <TargetFrameworkMonikerAssemblyAttributesPath Condition="'$(TargetFrameworkMoniker)' != ''">$([System.IO.Path]::Combine('$(IntermediateOutputPath)','$(TargetFrameworkMoniker).AssemblyAttributes$(DefaultLanguageSourceExtension)'))</TargetFrameworkMonikerAssemblyAttributesPath>
  </PropertyGroup>
  <ItemGroup>
    <EmbeddedFiles Include="$(GeneratedAssemblyInfoFile)" />
  </ItemGroup>

  <!-- Supplement Nerdbank.GitVersioning version calculations -->
  <Target Name="UpdateAssemblyVersionInfo" BeforeTargets="GenerateAssemblyVersionInfo" DependsOnTargets="GetBuildVersion">
    <PropertyGroup>
      <!-- Local builds should have a '-dev' suffix on the build number -->
      <PrereleaseSuffix Condition=" '$(GITHUB_ACTIONS)' != 'true' ">-dev</PrereleaseSuffix>
      <!-- AssemblyVersion and AssemblyFileVersion should be x.y.z.0 -->
      <AssemblyVersion>$(BuildVersionSimple)</AssemblyVersion>
      <AssemblyFileVersion>$(BuildVersionSimple)</AssemblyFileVersion>
      <!-- Always put the Git hash in the informational version, even for non-pre-release versions -->
      <AssemblyInformationalVersion>$(BuildVersionSimple)$(PrereleaseVersion)$(PrereleaseSuffix)+$(GitCommitIdShort)</AssemblyInformationalVersion>
    </PropertyGroup>
  </Target>

  <Target Name="UpdateNuSpecProperties" BeforeTargets="GenerateNuspec" DependsOnTargets="GetBuildVersion">
    <PropertyGroup>
      <!-- Local builds should have a '-dev' suffix on the build number -->
      <PrereleaseSuffix Condition=" '$(GITHUB_ACTIONS)' != 'true' ">-dev</PrereleaseSuffix>
      <!-- Pass through values we don't know ahead of time for any hand-crafted .nuspec files -->
      <NuspecProperties>
        Configuration=$(Configuration);
        GitCommitId=$(GitCommitId);
        PackageVersion=$(PackageVersion);
      </NuspecProperties>
    </PropertyGroup>
  </Target>

  <!-- ILRepack support -->
  <Target
      Name="ILRepack"
      AfterTargets="Build"
      Condition=" '$(TargetFramework)' != '' ">
    <PropertyGroup>
      <OutputAssembly>$([System.IO.Path]::Combine($(TargetDir), "merged", "$(TargetFileName)"))</OutputAssembly>
    </PropertyGroup>

    <Message Text="$(TargetName) -> $(OutputAssembly)" Importance="High" />
    <CallTarget Targets="ILRepackConditional" />
  </Target>

  <Target
      Name="ILRepackConditional"
      Inputs="$(TargetPath)"
      Outputs="$(TargetDir)merged\$(TargetFileName)">
    <ItemGroup>
      <ILRepackExclusions Include="$(OutputPath)*.abstractions.dll;$(OutputPath)Microsoft.*.dll;$(OutputPath)netstand*.dll;$(OutputPath)NuGet.*.dll;$(OutputPath)System.*.dll" />
    </ItemGroup>
    <ItemGroup>
      <Assemblies
          Include="$(TargetDir)*.dll;$(TargetPath)"
          Exclude="@(ILRepackExclusions)" />
    </ItemGroup>

    <MakeDir Directories="$(TargetDir)premerge;$(TargetDir)merged" />
    <!-- We copy assemblies into a 'premerge' folder and merge from there, because of this issue: https://github.com/gluck/il-repack/issues/283 -->
    <Copy SourceFiles="@(Assemblies)" DestinationFolder="$(TargetDir)premerge" />

    <PropertyGroup>
      <ILRepackExe>$([System.IO.Path]::Combine($(NuGetPackageRoot), "ilrepack.msbuild.task", $(ILRepackVersion), "tools", "ilrepack.exe"))</ILRepackExe>
      <ILRepackExe Condition=" '$(OS)' != 'Windows_NT' ">mono $(ILRepackExe)</ILRepackExe>
      <MainAssembly>$([System.IO.Path]::Combine($(TargetDir), "premerge", "$(TargetFileName)"))</MainAssembly>
      <OutputAssembly>$([System.IO.Path]::Combine($(TargetDir), "merged", "$(TargetFileName)"))</OutputAssembly>
    </PropertyGroup>

    <ItemGroup>
      <OutputsToCopy Include="$(TargetDir)*.config;@(ILRepackExclusions)" />
      <ILRepackDependencies
          Include="$(TargetDir)premerge\*.dll"
          Exclude="$(MainAssembly)"/>
    </ItemGroup>

    <Copy SourceFiles="@(OutputsToCopy)" DestinationFolder="$(TargetDir)merged" />
    <Exec
        StandardOutputImportance="low"
        Command="$(ILRepackExe) -internalize -ndebug -lib:$(TargetDir) -out:$(OutputAssembly) $(MainAssembly) @(ILRepackDependencies, ' ')" />
    <RemoveDir Directories="$(TargetDir)premerge" />
  </Target>

</Project>
